// Test script to verify TridiumExportService functionality
// Run with: node --loader tsx test-tridium-parser.ts

import fs from 'fs';
import path from 'path';
import TridiumExportService from '../src/services/tridium/TridiumExportService.js';

async function testResourceExportParsing() {
  console.log('🧪 Testing ResourceExport parsing...');
  
  const filePath = path.join(__dirname, '../docs/Example_Exports/Jace1_ResourceExport.csv');
  const fileContent = fs.readFileSync(filePath, 'utf8');
  
  // Create a mock File object
  const mockFile = new File([fileContent], 'Jace1_ResourceExport.csv', { type: 'text/csv' });
  
  try {
    const result = await TridiumExportService.parseResourceExport(mockFile);
    console.log('✅ ResourceExport parsed successfully:');
    console.log('   CPU Usage:', result.cpuUsage + '%');
    console.log('   Memory Usage:', Math.round((result.heapUsed / result.heapMax) * 100) + '%');
    console.log('   Device Count:', result.deviceCount);
    console.log('   Point Count:', result.pointCount);
    console.log('   Uptime:', result.uptime);
    console.log('');
  } catch (error) {
    console.error('❌ ResourceExport parsing failed:', error.message);
  }
}

async function testBACnetExportParsing() {
  console.log('🧪 Testing BACnetExport parsing...');
  
  const filePath = path.join(__dirname, '../docs/Example_Exports/JaceBacnetExport.csv');
  const fileContent = fs.readFileSync(filePath, 'utf8');
  
  // Create a mock File object
  const mockFile = new File([fileContent], 'JaceBacnetExport.csv', { type: 'text/csv' });
  
  try {
    const result = await TridiumExportService.parseBACnetExport(mockFile);
    console.log('✅ BACnetExport parsed successfully:');
    console.log('   Total devices:', result.length);
    console.log('   Sample devices:');
    result.slice(0, 3).forEach(device => {
      console.log(`     - ${device.name} (${device.vendor} ${device.model}) - Status: ${device.status}`);
    });
    console.log('');
  } catch (error) {
    console.error('❌ BACnetExport parsing failed:', error.message);
  }
}

async function testFileTypeDetection() {
  console.log('🧪 Testing file type detection...');
  
  const testFiles = [
    'Jace1_ResourceExport.csv',
    'JaceBacnetExport.csv', 
    'Jace1_N2xport.csv',
    'JacePlatformDetails.txt',
    'unknown_file.csv'
  ];
  
  testFiles.forEach(filename => {
    const detectedType = TridiumExportService.detectFileType(filename);
    console.log(`   ${filename} -> ${detectedType}`);
  });
  console.log('');
}

async function runTests() {
  console.log('🚀 Starting Tridium Export Service Tests\n');
  
  await testFileTypeDetection();
  await testResourceExportParsing();
  await testBACnetExportParsing();
  
  console.log('✅ All tests completed!');
}

// Only run if this is the main module
if (require.main === module) {
  runTests().catch(console.error);
}

export { testResourceExportParsing, testBACnetExportParsing, testFileTypeDetection };
