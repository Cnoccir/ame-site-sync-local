import { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { EnhancedTridiumParsingService } from '../EnhancedTridiumParsingService';\nimport { tridiumDatabaseService } from '../TridiumDatabaseService';\nimport { TridiumDatasetStore } from '../tridiumDatasetStore';\nimport { supabase } from '@/integrations/supabase/client';\n\n/**\n * End-to-End Integration Test for Tridium Parsing to Database Pipeline\n * \n * This test verifies the complete data flow:\n * 1. File parsing with all parser types\n * 2. Data normalization and alert generation\n * 3. Database persistence with proper relationships\n * 4. Reporting data retrieval and validation\n * 5. Data integrity and consistency checks\n */\ndescribe('Tridium Database Integration E2E', () => {\n  let parsingService: EnhancedTridiumParsingService;\n  let testProjectId: string;\n  let testCustomerId: string;\n  let createdBaselineIds: string[] = [];\n\n  // Sample test data representing different export types\n  const samplePlatformDetailsContent = `Host ID: TEST-JACE-001\nModel: JACE-8000\nProduct: Niagara AX\nArchitecture: Multi-JACE\nRAM Total: 2048 MB\nRAM Free: 1536 MB\nDaemon Version: 4.8.0.184\nOperating System: Linux\nJava Version: 1.8.0_292\nNiagara Version: 4.8.0.184\nTLS Enabled: true\nSecurity Score: 85`;\n\n  const sampleResourceExportContent = `Name,Value\nComponents,1250\nEnabled Components,1180\nDisabled Components,70\nDevices,45\nDevices Online,42\nDevices Offline,3\nPoints,2500\nHistories,850\nHeap Used MB,256\nHeap Total MB,1024\nUptime Hours,168\nEngine Stats,{\"threadCount\":12,\"memoryPool\":\"G1GC\"}`;\n\n  const sampleBACnetExportContent = `Object_Name,Object_Type,Object_Instance,Device_ID,Vendor,Model,Status,Health\nAHU-01,Device,100,100,\"Johnson Controls\",\"FEC3611\",\"{ok}\",healthy\nVAV-101,Device,101,101,\"Trane\",\"UC400\",\"{ok}\",healthy\nVAV-102,Device,102,102,\"Trane\",\"UC400\",\"{down}\",unhealthy\nCHWS-01,Device,200,200,\"York\",\"YVAA\",\"{alarm}\",warning`;\n\n  const sampleN2ExportContent = `Name,Status,Address,Controller Type,Network,Zone\nAHU-Main,{ok},1,AHU,N2-Trunk-1,Mechanical Room\nVAV-201,{ok},2,VAV,N2-Trunk-1,Floor 2\nVAV-202,{down},3,VAV,N2-Trunk-1,Floor 2\nFan-Exhaust,{ok},4,FAN,N2-Trunk-2,Roof`;\n\n  beforeEach(async () => {\n    parsingService = new EnhancedTridiumParsingService();\n    \n    // Create test project and customer for database operations\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User must be authenticated for integration tests');\n    }\n\n    // Create test customer\n    const { data: customer, error: customerError } = await supabase\n      .from('simpro_customers')\n      .insert({\n        simpro_customer_id: 'TEST_CUSTOMER_001',\n        company_name: 'Test Customer for Integration',\n        service_tier: 'ASSURE'\n      })\n      .select('id')\n      .single();\n\n    if (customerError || !customer) {\n      throw new Error('Failed to create test customer');\n    }\n    testCustomerId = customer.id;\n\n    // Create test project\n    const { data: project, error: projectError } = await supabase\n      .from('pm_projects')\n      .insert({\n        project_name: 'Test PM Project for Integration',\n        customer_id: testCustomerId,\n        customer_name: 'Test Customer for Integration',\n        service_tier: 'ASSURE',\n        created_by: user.id\n      })\n      .select('id')\n      .single();\n\n    if (projectError || !project) {\n      throw new Error('Failed to create test project');\n    }\n    testProjectId = project.id;\n  });\n\n  afterEach(async () => {\n    // Cleanup created data\n    try {\n      // Delete system baselines (cascade will handle related data)\n      if (createdBaselineIds.length > 0) {\n        await Promise.all(\n          createdBaselineIds.map(id => \n            tridiumDatabaseService.deleteSystemBaseline(id)\n          )\n        );\n      }\n\n      // Delete test project\n      if (testProjectId) {\n        await supabase.from('pm_projects').delete().eq('id', testProjectId);\n      }\n\n      // Delete test customer\n      if (testCustomerId) {\n        await supabase.from('simpro_customers').delete().eq('id', testCustomerId);\n      }\n    } catch (error) {\n      console.warn('Cleanup failed:', error);\n    }\n  });\n\n  it('should handle complete end-to-end parsing and database storage', async () => {\n    // Step 1: Create mock files for different export types\n    const mockFiles = [\n      new File([samplePlatformDetailsContent], 'PlatformDetails.txt', { type: 'text/plain' }),\n      new File([sampleResourceExportContent], 'ResourceExport.csv', { type: 'text/csv' }),\n      new File([sampleBACnetExportContent], 'BACnetExport.csv', { type: 'text/csv' }),\n      new File([sampleN2ExportContent], 'N2Export.csv', { type: 'text/csv' })\n    ];\n\n    // Step 2: Parse files with database persistence\n    const result = await parsingService.parseFiles(\n      mockFiles,\n      testProjectId,\n      testCustomerId,\n      'Test Site Integration'\n    );\n\n    // Step 3: Verify parsing results\n    expect(result.databaseSaved).toBe(true);\n    expect(result.savingErrors).toHaveLength(0);\n    expect(result.systemBaselineId).toBeDefined();\n    expect(result.datasets).toHaveLength(4);\n    expect(result.platformData).toBeDefined();\n    expect(result.resourceData).toBeDefined();\n\n    if (result.systemBaselineId) {\n      createdBaselineIds.push(result.systemBaselineId);\n    }\n\n    // Step 4: Verify database storage\n    const baseline = await tridiumDatabaseService.getSystemBaseline(result.systemBaselineId!);\n    expect(baseline).toBeDefined();\n    expect(baseline.site_name).toBe('Test Site Integration');\n    expect(baseline.project_id).toBe(testProjectId);\n    expect(baseline.customer_id).toBe(testCustomerId);\n\n    // Step 5: Verify platform details storage\n    expect(baseline.platform_details).toHaveLength(1);\n    const platformDetail = baseline.platform_details[0];\n    expect(platformDetail.model).toBe('JACE-8000');\n    expect(platformDetail.product).toBe('Niagara AX');\n    expect(platformDetail.tls_enabled).toBe(true);\n    expect(platformDetail.security_score).toBe(85);\n\n    // Step 6: Verify resource utilization storage\n    expect(baseline.resource_utilization).toHaveLength(1);\n    const resourceUtil = baseline.resource_utilization[0];\n    expect(resourceUtil.components_total).toBe(1250);\n    expect(resourceUtil.devices_total).toBe(45);\n    expect(resourceUtil.heap_percent_used).toBeCloseTo(25); // 256/1024 * 100\n\n    // Step 7: Verify device storage\n    expect(baseline.bacnet_devices.length).toBeGreaterThan(0);\n    expect(baseline.n2_devices.length).toBeGreaterThan(0);\n    \n    const bacnetDevice = baseline.bacnet_devices.find(d => d.device_name === 'AHU-01');\n    expect(bacnetDevice).toBeDefined();\n    expect(bacnetDevice.vendor).toBe('Johnson Controls');\n    expect(bacnetDevice.enabled).toBe(true);\n    expect(bacnetDevice.health).toBe('healthy');\n\n    const n2Device = baseline.n2_devices.find(d => d.device_name === 'AHU-Main');\n    expect(n2Device).toBeDefined();\n    expect(n2Device.address).toBe(1);\n    expect(n2Device.is_online).toBe(true);\n    expect(n2Device.controller_type).toBe('AHU');\n\n    // Step 8: Verify alert storage\n    expect(baseline.system_alerts.length).toBeGreaterThan(0);\n    const criticalAlerts = baseline.system_alerts.filter(a => a.severity === 'critical');\n    const warningAlerts = baseline.system_alerts.filter(a => a.severity === 'warning');\n    expect(criticalAlerts.length + warningAlerts.length).toBe(baseline.system_alerts.length);\n  });\n\n  it('should provide accurate reporting data', async () => {\n    // First, create a system baseline with test data\n    const baselineId = await tridiumDatabaseService.createSystemBaseline({\n      projectId: testProjectId,\n      customerId: testCustomerId,\n      siteName: 'Reporting Test Site',\n      systemArchitecture: 'multi-jace',\n      niagaraVersion: '4.8.0.184',\n      totalDevices: 25,\n      totalPoints: 1500,\n      healthScore: 92,\n      parsedBy: (await supabase.auth.getUser()).data.user!.id\n    });\n\n    expect(baselineId).toBeDefined();\n    createdBaselineIds.push(baselineId!);\n\n    // Get reporting data\n    const reportingData = await tridiumDatabaseService.getReportingData(baselineId!);\n    expect(reportingData).toBeDefined();\n    expect(reportingData.baseline).toBeDefined();\n    expect(reportingData.baseline.site_name).toBe('Reporting Test Site');\n    expect(reportingData.baseline.health_score).toBe(92);\n    expect(reportingData.baseline.total_devices).toBe(25);\n\n    // Verify device counts structure\n    expect(reportingData.deviceCounts).toBeDefined();\n    expect(reportingData.deviceCounts.bacnet).toBeDefined();\n    expect(reportingData.deviceCounts.n2).toBeDefined();\n    expect(reportingData.deviceCounts.modbus).toBeDefined();\n    expect(reportingData.deviceCounts.network).toBeDefined();\n\n    // Verify alert counts structure\n    expect(reportingData.alertCounts).toBeDefined();\n    expect(typeof reportingData.alertCounts.total).toBe('number');\n    expect(typeof reportingData.alertCounts.critical).toBe('number');\n    expect(typeof reportingData.alertCounts.warning).toBe('number');\n  });\n\n  it('should maintain data integrity across operations', async () => {\n    // Create baseline with related data\n    const baselineId = await tridiumDatabaseService.createSystemBaseline({\n      projectId: testProjectId,\n      customerId: testCustomerId,\n      siteName: 'Data Integrity Test',\n      totalDevices: 10,\n      parsedBy: (await supabase.auth.getUser()).data.user!.id\n    });\n\n    expect(baselineId).toBeDefined();\n    createdBaselineIds.push(baselineId!);\n\n    // Add devices\n    const testBACnetDevices = [{\n      deviceName: 'Test-Device-001',\n      deviceId: 1001,\n      vendor: 'Test Vendor',\n      enabled: true,\n      health: 'healthy',\n      isOnline: true,\n      isHealthy: true\n    }];\n\n    const deviceSaveResult = await tridiumDatabaseService.saveBACnetDevices(baselineId!, testBACnetDevices);\n    expect(deviceSaveResult).toBe(true);\n\n    // Add alerts\n    const testAlerts = [{\n      alertType: 'device' as const,\n      metricName: 'Device Health',\n      severity: 'warning' as const,\n      title: 'Test Alert',\n      description: 'Test alert for integration testing',\n      currentValue: '1',\n      thresholdValue: '0'\n    }];\n\n    const alertSaveResult = await tridiumDatabaseService.saveSystemAlerts(baselineId!, testAlerts);\n    expect(alertSaveResult).toBe(true);\n\n    // Verify relationships are maintained\n    const fullBaseline = await tridiumDatabaseService.getSystemBaseline(baselineId!);\n    expect(fullBaseline.bacnet_devices).toHaveLength(1);\n    expect(fullBaseline.system_alerts).toHaveLength(1);\n    \n    const device = fullBaseline.bacnet_devices[0];\n    const alert = fullBaseline.system_alerts[0];\n    \n    expect(device.baseline_id).toBe(baselineId);\n    expect(alert.baseline_id).toBe(baselineId);\n\n    // Test cascading delete\n    const deleteResult = await tridiumDatabaseService.deleteSystemBaseline(baselineId!);\n    expect(deleteResult).toBe(true);\n\n    // Remove from cleanup array since we deleted it\n    createdBaselineIds = createdBaselineIds.filter(id => id !== baselineId);\n\n    // Verify cascading delete worked\n    const deletedBaseline = await tridiumDatabaseService.getSystemBaseline(baselineId!);\n    expect(deletedBaseline).toBe(null);\n  });\n\n  it('should handle TridiumDatasetStore database integration', async () => {\n    // Test dataset store integration with database\n    const baselines = await TridiumDatasetStore.getAll(testProjectId);\n    expect(Array.isArray(baselines)).toBe(true);\n\n    // Create a baseline to test dataset store functionality\n    const baselineId = await tridiumDatabaseService.createSystemBaseline({\n      projectId: testProjectId,\n      customerId: testCustomerId,\n      siteName: 'Dataset Store Test',\n      totalDevices: 5,\n      healthScore: 88,\n      parsedBy: (await supabase.auth.getUser()).data.user!.id\n    });\n\n    expect(baselineId).toBeDefined();\n    createdBaselineIds.push(baselineId!);\n\n    // Get datasets for project should now include our baseline\n    const updatedBaselines = await TridiumDatasetStore.getAll(testProjectId);\n    expect(updatedBaselines.length).toBeGreaterThan(baselines.length);\n\n    const ourDataset = updatedBaselines.find(d => d.id === `baseline-${baselineId}`);\n    expect(ourDataset).toBeDefined();\n    expect(ourDataset!.summary.totalDevices).toBe(5);\n    expect(ourDataset!.summary.healthScore).toBe(88);\n    expect(ourDataset!.metadata?.projectId).toBe(testProjectId);\n    expect(ourDataset!.metadata?.customerId).toBe(testCustomerId);\n\n    // Test getById functionality\n    const retrievedDataset = await TridiumDatasetStore.getById(`baseline-${baselineId}`);\n    expect(retrievedDataset).toBeDefined();\n    expect(retrievedDataset!.id).toBe(`baseline-${baselineId}`);\n  });\n\n  it('should handle error cases gracefully', async () => {\n    // Test with invalid project ID\n    const invalidResult = await parsingService.parseFiles(\n      [new File(['test'], 'test.txt')],\n      'invalid-project-id',\n      undefined,\n      'Test Site'\n    );\n\n    expect(invalidResult.databaseSaved).toBe(false);\n    expect(invalidResult.savingErrors.length).toBeGreaterThan(0);\n\n    // Test database service error handling\n    const invalidBaseline = await tridiumDatabaseService.getSystemBaseline('invalid-id');\n    expect(invalidBaseline).toBe(null);\n\n    const deleteInvalid = await tridiumDatabaseService.deleteSystemBaseline('invalid-id');\n    expect(deleteInvalid).toBe(false);\n\n    // Test dataset store error handling\n    const invalidDataset = await TridiumDatasetStore.getById('invalid-id');\n    expect(invalidDataset).toBe(null);\n  });\n});